When would you want to use a remote repository rather than keeping all your work
local?

    Having a remote repository means that others can collaborate working on the file and it can be accessed from other remote devices. Keeping all the work local means it can only be accessed by that device and only be the user of that device. Remote repository also serves as a back up should the local repository and/or device is compromised or fails.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    one may still be working on changes and/or they may not be complete. One would not want changes that had not been validated being updated to the live project.
    they may not compile or may even run.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks: Making a copy of an existing repository only on GitHub upon which others can collaborate without affecting the original repository. The owner of original repository is acredited and can also comment and collaborate on the copy. GitHub also tracks who has forked the original repository.
    Used when more than one person wants to collaborate on a project that uses an existing repository as a base. 
    Forks only work in the context of GitHub

    Clones: Copy of an existing repository either locally hosted or on GitHub. Owner of original repository on GitHub cannot be acredited or collaborate on the cloned copy. Nor are the users who cloned the repository, tracked back to the original.
    Clones work on any two repositories GitHub and/or local.

    Branches: Used when variations/ additional features/ changes of the master whish to be created and tested before being added to the main file. And one wants to work on a version or feature separately to avoid breaking already validated code. Used mainly on local working repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Should you need to work offline you know that you are working with the latest version and then only need to merge when you go back on line to be fully up to date.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without Git/GitHub one would have to share files via email or likes of DropBox, manually check for conlicts and merge files. The cost in time and risk of error would be considerable. The use of the likes of #slack may make communication between those working on the project may be more efficient however one loses the relevance to and the mark up off the code it self.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Working on a separate branch enables more than one personto collaborate on a solution without affecting the master development code. Ensuring the existing validated code is not broken. Enables collaboration and various solutions to be worked up, tested and validated before merging into the final code. Promotes more adventurous and robust solutions. Especially useful on large complex projects.

    With small simple projects or a single user, working with just a master branch may be more suitable as everything is easier to manage control and has a more linear approach.
