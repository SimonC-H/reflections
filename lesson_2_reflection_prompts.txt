What happens when you initialize a repository? Why do you need to do it?

Initialising a repository creates an empty hidden file  ".git" with no commits and tacks no files. This has to be done to set up the repository to which changes can be tracked.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

Working directory is where the working files are stored. The staging area is means whith which to collate files that one wishes to add to the repository under one commit. One can either add one file per commit or several files.



How can you use the staging area to make sure you have one commit per logical
change?

By using the Staging area one can double check that the changes are correct before commiting them to the repository using 
git diff to compare working directory and staging area
git diff --staged to compare staging area with latest commit
get diff commit1 commit2 used to compare two commits.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If one wanted to create a variation  or try out a new feature without affecting the original code which would remain unchanged.

How do the diagrams help you visualize the branch structure?

Using a simple flow diagram structure one can quickly and easily see the parent and child relationships of commits and see how each branch relates to the master branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

It combines all the changes on both branches and the merge commit then becomes the head of the combined branch.
The labels of the combined branches can then be removed as the new merge commit will be the parent of the combined branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Without considerable advances with machine learning Git cannot ascertain which changes should be kept wnd/or are the correct changes. It simply highlights where there are differences for the users to resolve. If Git could resolve changes automatically the code could be come a combination of code that may not compile or run. Only the contributers who wrote the code can resolve the conflicts efficiently.